# Environment Variables for Wound Care RT Supply Tracker

# Database Configuration
DATABASE_URL=postgresql://username:password@hostname:port/database_name

# JWT Secret Key (Change this to a secure random string in production!)
JWT_SECRET=your-super-secret-jwt-key-change-this-in-production-make-it-long-and-random

# Node Environment
NODE_ENV=production

# Port (Heroku will set this automatically)
PORT=3000

# Example for local development:
# DATABASE_URL=postgresql://localhost:5432/wound_care_tracker
# NODE_ENV=development

# Example for Heroku PostgreSQL:
# DATABASE_URL=postgres://user:password@host:port/dbname
# (Heroku sets this automatically when you add Heroku Postgres addon)
# Registration with Email Verification Setup Guide

## 1. Install Required Dependencies
npm install nodemailer

## 2. Environment Variables Setup
# Create or update your .env file with these variables:

# Database
DATABASE_URL=your_postgres_connection_string
JWT_SECRET=your_secure_jwt_secret
NODE_ENV=production

# Email Configuration (choose one of the options below)

# Option A: Gmail (recommended for testing)
EMAIL_SERVICE=gmail
EMAIL_USER=your-gmail@gmail.com
EMAIL_PASS=your-app-password  # Use Gmail App Password, not regular password
EMAIL_FROM=your-gmail@gmail.com

# Option B: SendGrid
EMAIL_SERVICE=sendgrid
EMAIL_USER=apikey
EMAIL_PASS=your-sendgrid-api-key
EMAIL_FROM=noreply@yourdomain.com

# Option C: Outlook/Hotmail
EMAIL_SERVICE=outlook
EMAIL_USER=your-outlook@outlook.com
EMAIL_PASS=your-outlook-password
EMAIL_FROM=your-outlook@outlook.com

# Option D: Custom SMTP (for other providers)
EMAIL_HOST=smtp.yourdomain.com
EMAIL_PORT=587
EMAIL_SECURE=false
EMAIL_USER=your-email@yourdomain.com
EMAIL_PASS=your-email-password
EMAIL_FROM=noreply@yourdomain.com

## 3. Gmail Setup Instructions (Most Common)

### Step 1: Enable 2-Factor Authentication
1. Go to your Google Account settings
2. Security → 2-Step Verification → Turn on

### Step 2: Generate App Password
1. Google Account → Security → 2-Step Verification
2. At the bottom: App passwords
3. Generate password for "Mail"
4. Use this 16-character password in EMAIL_PASS

### Step 3: Test Email Configuration
# Add this test route temporarily to your server.js to verify email works:

app.get('/test-email', async (req, res) => {
    try {
        await emailTransporter.sendMail({
            from: EMAIL_CONFIG.from,
            to: 'your-test-email@gmail.com',
            subject: 'Test Email',
            text: 'If you receive this, email is working!'
        });
        res.send('Test email sent!');
    } catch (error) {
        res.status(500).send('Email error: ' + error.message);
    }
});

## 4. Database Migration
# Run your server to create the new tables automatically:
node server.js

# Or run the migration manually:
# The new tables will be created automatically:
# - email_verification_tokens
# - password_reset_tokens (bonus feature)

## 5. Admin Panel Updates
# Update the admin users table header in your index.html:

<thead>
    <tr>
        <th>Name</th>
        <th>Email</th>
        <th>Role</th>
        <th>Facility</th>
        <th>Email Status</th>
        <th>Account Status</th>
        <th>Actions</th>
    </tr>
</thead>

## 6. Testing the Registration Flow

### Test Case 1: Full Registration Flow
1. Go to login page → "Create Account"
2. Fill out registration form
3. Check email for verification link
4. Click verification link
5. Login as admin → Admin Panel → Approve user
6. User can now login

### Test Case 2: Resend Verification
1. Register account
2. Click "Didn't receive email?"
3. Enter email address
4. Check for new verification email

### Test Case 3: Expired/Invalid Token
1. Register account
2. Wait 24+ hours or use invalid token
3. Should show "Verification Link Expired" message

## 7. Common Issues & Solutions

### Issue: "Invalid login" error for Gmail
Solution: Use App Password instead of regular password

### Issue: "self signed certificate" error
Solution: Add to email config:
```javascript
tls: {
    rejectUnauthorized: false
}
```

### Issue: Emails go to spam
Solution: 
- Use proper FROM address
- Set up SPF/DKIM records for your domain
- Use reputable email service (SendGrid, etc.)

### Issue: No email service configured
Solution: Registration will still work but users need manual approval

## 8. Security Features Included

✅ Email verification required
✅ Admin approval required  
✅ Password minimum length (8 chars)
✅ Password confirmation
✅ Token expiration (24 hours)
✅ One-time use tokens
✅ SQL injection protection
✅ XSS protection

## 9. Production Deployment Notes

1. Use environment variables for all sensitive data
2. Set up proper email domain authentication
3. Consider rate limiting for registration endpoints
4. Monitor failed login attempts
5. Set up email delivery monitoring
6. Consider adding CAPTCHA for registration

## 10. Optional Enhancements

You can add these features later:
- Password reset functionality (already scaffolded)
- Email templates with company branding  
- Admin notifications when users register
- Bulk user invitation system
- LDAP/Active Directory integration
- OAuth login (Google, Microsoft)

## Start the Server
node server.js

# The system will now show:
# ✅ Registration link on login page
# ✅ Email verification flow
# ✅ Enhanced admin user management
# ✅ Email status tracking
